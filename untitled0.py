# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O5Ir6i-iSscuj1wZxoB0mmdYc3_gGhdH
"""

# Clase base Estudiante para gestión de estudiantes
class Estudiante:
    def __init__(self, nombre, matricula):
        # Constructor que inicializa el nombre, matrícula y una lista vacía de calificaciones
        self.nombre = nombre
        self.matricula = matricula
        self.calificaciones = []

    def agregar_calificacion(self, calificacion):
        # Método para agregar calificación
        self.calificaciones.append(calificacion)

    def calcular_promedio(self):
        # Calcular promedio de las calificaciones
        if len(self.calificaciones) == 0:
            return 0
        return sum(self.calificaciones) / len(self.calificaciones)

    def mostrar_informacion(self):
        # Muestra el nombre, matrícula y promedio del estudiante
        print(f"Nombre: {self.nombre}")
        print(f"Matrícula: {self.matricula}")
        print(f"Calificaciones: {self.calificaciones}")
        print(f"Promedio: {self.calcular_promedio():.2f}")


# Clase derivada EstudianteLicenciatura que hereda de Estudiante
class EstudianteLicenciatura(Estudiante):
    def __init__(self, nombre, matricula, carrera):
        # Llama al constructor de la clase base Estudiante
        super().__init__(nombre, matricula)
        # Atributo exclusivo de la subclase
        self.carrera = carrera

    # Sobrescribe el método mostrar_informacion para agregar la carrera
    def mostrar_informacion(self):
        super().mostrar_informacion()
        print(f"Carrera: {self.carrera}")


# Clase derivada EstudiantePosgrado que hereda de Estudiante
class EstudiantePosgrado(Estudiante):
    def __init__(self, nombre, matricula, tesis):
        # Llama al constructor de la clase base Estudiante
        super().__init__(nombre, matricula)
        # Atributo exclusivo de la subclase
        self.tesis = tesis

    # Sobrescribe el método mostrar_informacion para agregar el tema de tesis
    def mostrar_informacion(self):
        super().mostrar_informacion()
        print(f"Tema de tesis: {self.tesis}")


# Programa principal
if __name__ == "__main__":
    # Crear objeto de la clase EstudianteLicenciatura
    estudiante_lic = EstudianteLicenciatura("Carlos Pérez", "A001", "Ingeniería en Software")
    estudiante_lic.agregar_calificacion(85)
    estudiante_lic.agregar_calificacion(75)
    estudiante_lic.agregar_calificacion(78)

    # Crear objeto de la clase EstudiantePosgrado
    estudiante_pos = EstudiantePosgrado("Ana López", "A002", "Inteligencia Artificial en Educación")
    estudiante_pos.agregar_calificacion(95)
    estudiante_pos.agregar_calificacion(86)
    estudiante_pos.agregar_calificacion(91)

    # Mostrar información de cada estudiante
    print("----- Estudiante de Licenciatura -----")
    estudiante_lic.mostrar_informacion()
    print("--------------------------------------")
    print("----- Estudiante de Posgrado -----")
    estudiante_pos.mostrar_informacion()